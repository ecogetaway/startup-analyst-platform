"""
Google AI client for startup analysis
"""
import google.generativeai as genai
from typing import Dict, Any, Optional
import json
import time
from ..config.settings import settings

class AIClient:
    """Google AI client wrapper"""
    
    def __init__(self):
        """Initialize the AI client"""
        genai.configure(api_key=settings.GOOGLE_API_KEY)
        self.model = genai.GenerativeModel(settings.GEMINI_MODEL)
        self.generation_config = genai.types.GenerationConfig(
            max_output_tokens=settings.MAX_TOKENS,
            temperature=settings.TEMPERATURE,
        )
    
    def generate_content(self, prompt: str, system_instruction: Optional[str] = None) -> str:
        """Generate content using Gemini"""
        try:
            if system_instruction:
                response = self.model.generate_content(
                    prompt,
                    generation_config=self.generation_config,
                    system_instruction=system_instruction
                )
            else:
                response = self.model.generate_content(
                    prompt,
                    generation_config=self.generation_config
                )
            
            if response.text:
                return response.text
            else:
                raise ValueError("No content generated by the model")
                
        except Exception as e:
            raise Exception(f"AI generation failed: {str(e)}")
    
    def generate_structured_content(self, prompt: str, system_instruction: Optional[str] = None) -> Dict[str, Any]:
        """Generate structured JSON content"""
        try:
            # Add JSON formatting instruction
            json_prompt = f"{prompt}\n\nPlease respond with valid JSON only, no additional text."
            
            content = self.generate_content(json_prompt, system_instruction)
            
            # Try to parse as JSON
            try:
                return json.loads(content)
            except json.JSONDecodeError:
                # If JSON parsing fails, try to extract JSON from the response
                import re
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    return json.loads(json_match.group())
                else:
                    raise ValueError("Could not extract valid JSON from response")
                    
        except Exception as e:
            raise Exception(f"Structured content generation failed: {str(e)}")
    
    def analyze_with_retry(self, prompt: str, system_instruction: Optional[str] = None, max_retries: int = 3) -> str:
        """Generate content with retry logic"""
        for attempt in range(max_retries):
            try:
                return self.generate_content(prompt, system_instruction)
            except Exception as e:
                if attempt == max_retries - 1:
                    raise e
                time.sleep(2 ** attempt)  # Exponential backoff
        
        raise Exception("Max retries exceeded")

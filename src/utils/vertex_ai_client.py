"""
Vertex AI client for advanced startup analysis
"""
import vertexai
from vertexai.generative_models import GenerativeModel, Part
from typing import Dict, Any, Optional, List
import json
import time
import logging
from ..config.settings import settings

logger = logging.getLogger(__name__)

class VertexAIClient:
    """Vertex AI client for advanced AI capabilities"""
    
    def __init__(self):
        """Initialize Vertex AI client"""
        try:
            # Initialize Vertex AI
            vertexai.init(
                project=settings.GOOGLE_CLOUD_PROJECT,
                location=settings.REGION
            )
            
            # Initialize Gemini model
            self.model = GenerativeModel("gemini-1.5-pro")
            
            logger.info("Vertex AI client initialized successfully")
            
        except Exception as e:
            logger.error(f"Failed to initialize Vertex AI: {str(e)}")
            raise Exception(f"Vertex AI initialization failed: {str(e)}")
    
    def generate_content(self, prompt: str, system_instruction: Optional[str] = None) -> str:
        """Generate content using Vertex AI Gemini"""
        try:
            generation_config = {
                "max_output_tokens": settings.MAX_TOKENS,
                "temperature": settings.TEMPERATURE,
                "top_p": 0.8,
                "top_k": 40
            }
            
            if system_instruction:
                response = self.model.generate_content(
                    prompt,
                    generation_config=generation_config,
                    system_instruction=system_instruction
                )
            else:
                response = self.model.generate_content(
                    prompt,
                    generation_config=generation_config
                )
            
            if response.text:
                return response.text
            else:
                raise ValueError("No content generated by the model")
                
        except Exception as e:
            logger.error(f"Vertex AI generation failed: {str(e)}")
            raise Exception(f"Vertex AI generation failed: {str(e)}")
    
    def generate_structured_content(self, prompt: str, system_instruction: Optional[str] = None) -> Dict[str, Any]:
        """Generate structured JSON content using Vertex AI"""
        try:
            # Add JSON formatting instruction
            json_prompt = f"{prompt}\n\nPlease respond with valid JSON only, no additional text."
            
            content = self.generate_content(json_prompt, system_instruction)
            
            # Try to parse as JSON
            try:
                return json.loads(content)
            except json.JSONDecodeError:
                # If JSON parsing fails, try to extract JSON from the response
                import re
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    return json.loads(json_match.group())
                else:
                    raise ValueError("Could not extract valid JSON from response")
                    
        except Exception as e:
            logger.error(f"Structured content generation failed: {str(e)}")
            raise Exception(f"Structured content generation failed: {str(e)}")
    
    def analyze_with_retry(self, prompt: str, system_instruction: Optional[str] = None, max_retries: int = 3) -> str:
        """Generate content with retry logic"""
        for attempt in range(max_retries):
            try:
                return self.generate_content(prompt, system_instruction)
            except Exception as e:
                if attempt == max_retries - 1:
                    raise e
                logger.warning(f"Attempt {attempt + 1} failed, retrying...")
                time.sleep(2 ** attempt)  # Exponential backoff
        
        raise Exception("Max retries exceeded")
    
    def multimodal_analysis(self, text: str, image_data: Optional[bytes] = None) -> str:
        """Perform multimodal analysis with text and images"""
        try:
            parts = [Part.from_text(text)]
            
            if image_data:
                parts.append(Part.from_data(image_data, mime_type="image/jpeg"))
            
            response = self.model.generate_content(parts)
            
            if response.text:
                return response.text
            else:
                raise ValueError("No content generated by multimodal model")
                
        except Exception as e:
            logger.error(f"Multimodal analysis failed: {str(e)}")
            raise Exception(f"Multimodal analysis failed: {str(e)}")
    
    def batch_analyze(self, prompts: List[str], system_instruction: Optional[str] = None) -> List[str]:
        """Analyze multiple prompts in batch"""
        try:
            results = []
            for prompt in prompts:
                result = self.generate_content(prompt, system_instruction)
                results.append(result)
            return results
        except Exception as e:
            logger.error(f"Batch analysis failed: {str(e)}")
            raise Exception(f"Batch analysis failed: {str(e)}")
